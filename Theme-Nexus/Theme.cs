// ***********************************************************************
// Assembly         : Zeroit.Framework.UIThemes
// Author           : ZEROIT
// Created          : 03-18-2019
//
// Last Modified By : ZEROIT
// Last Modified On : 03-18-2019
// ***********************************************************************
// <copyright file="Theme.cs" company="Zeroit Dev Technologies">
//     Copyright © Zeroit Dev Technologies  2017. All Rights Reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Drawing.Drawing2D;
using System.Drawing;
using System.Windows.Forms;
using System.ComponentModel;

namespace Zeroit.Framework.UIThemes.Nexus
{

    #region Theme Utility Stuff
    public class Palette
    {
        public Color ColHighest;
        public Color ColHigh;
        public Color ColMed;
        public Color ColDim;
        public Color ColDark;
    }
    public enum ImageMode : byte
    {
        Normal = 0,
        Scaled = 1
    }
    public enum MouseState : byte
    {
        None = 0,
        Over = 1,
        Down = 2,
        Block = 3
    }
    public enum GradientAlignment : byte
    {
        Vertical = 0,
        Horizontal = 1
    }
    public class DrawUtils
    {
        public string BlueTexture = "iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAA2TSURBVHjaLJnZkhzJcUWPe0TkVmt3Aw0MZobikEMZjcbP0b/pv7SYybhIGo4ANNBbrblGhOsh8FQvWVVZkfdeP35L/uVf51M/w3WUDQmGES4X2GwgzcIwGlUH6oVQGTlDjML9d5lhhhqjmgwx4eFVudkbP3zIWDAus9I0Rkrw/FV4fBDyBOudsdoKS4T+AsmE97+F2htxgOtZWCajawz/+AiVEw6PRkbY3MB+KywzNK0RGpgnmC8wzIKpsNtnzl8gKtR7MCcg4J0xXOAyws0G3m8T//U3x9jDmzvj5382xlk4PpdDCJ0ga+N6ED59NFY7QTOICFLD6SL45SxMydBF8M6YTwIOphmWCaoGrieha4xNZ8yLYrPRjzChXC9QeWOzMdTB8aDwyRh74fY2M12FuAhpzEQHWWF7B1MEauPyBF1rxAwvj9B5odmAc6BZ8FIBC6gZIpAWyIuhXphGRTWzXRt1Bbtt4nQ0zmclZgC4HIXdjaFmTL1yPgvBCW7KnB+V3/3eqLrEx0+KqBGTsrox3t4anz8Cs7C5NbSC84OgYqQZlgEchidAqASLhophk9AEGMeiNzIEB3GAISgGtF35xTFnYnSMJ5g8ODGCM3KCbBAH46//KdRrZclCUoUK+l6Ye2PuIV2F2UNYQV3BdIXLM3QN5ACeZDSrchp9r5hAbmB3A6s+Q4JlKoKWXkGhaTMvByWr0HbGMkF/Vro2s91mJBlNgATMC/RXRQOYh7yAqXC9GMtsrFYwXuH5RVGD3TqRF+V1FDY7w58vMC9C1xpNbaQkjFfBDO7fGMPJaNewzMLhGXwAj5IM4iSgIM5o1kUi29ronDHNsNkVw8TBqBuoV0CAGbi9M1YNPL1ANxu7lFlG8ArLZFx7cM7wN1voo+E6iCPMYmiCuAi9gdYw9eBaQ9vyGHpRFgV1xjwLlS9mWndFy7U3VkFQhXg1tAFDEITgDFsyl5MwTnAZheFaDNVU0FWwbox//N2oFHxdg2vKKbhOWCmcrkaMJT50A+KFw4uQBCYz5hk0CNMotG3m9tZ4/yZzORgjinVK1ya8CvsK4mJcBphj0di0KG42ZARRY9UJwyAwGWMWfvdz5vWTMo+g5g20CNc5WO+h7oTKwcOvwvOz0p8E9UJ3B9kUG8Eugk2CBojZyArreyM64eUoPJ8cp0lYDJYFVp2xLCXbxqGkRUzle49HoT8L7+4zaObrA+zvjKoFX+2MrMJ+lTEn5QMu0DaGBEgXCL48anpDRsELqM9EHHlWrIKXg1GtIFMe3fkifP8W3n1vfD4Ztx18/z7zdFCqysjAl1fhMim5NyovvBwcTWs8PkJVGc0O/GVUIkLohH1nHD4LMsDmDdSdcfgE4yj4ZOQJcEVNPhg3deJyFNzWynQ5K1Wd2VTCcBCcGCkZbSugmf3eWOZyqk/PgovC1mVyB+LheBRagVAZh7NDRvDzIKiHh/91nFeZZQEX4fhZIRiyQBDj9CyEIGj1LUArkJBoOmUYleMJbDbyJFglNFUJ3P4I//Qh0V/h4aMSqsTx0XN8EboVkA1RI8+OFOFpELY34CtjiYJvuxIt9dbYboxlhM4bcxS+PApehNtdJidhxOiCMY3CZgMuwDBBXRunk9CGoq3TQbAo+NvMdFWWS+Z6VKaLcklwPcDN2ng5CFkU9YZkQbRE1TAJ7RbUwK8agMy8gHPC6g4eHiEL/PRzRgFboL8YQw91ZcRROF3ht783DOPcC5sOJMDm1ljHxOtjoZ+qMp5ePdMsLAt8+axs7xLzIMRZkQpSFJpg4AxzJWNNhdpndJkMNUESvDzBrx+FcRTmSVgynI9Qefj5D4ZE2Dbww/tM5WC8KCEZQWFJhWjOvdCujO3WcCbs9lBtjNBklgTdxrgOynFwNCvDSQnk1caoaiEBolKQK4I+viqfvwifPitDD2KZ4IymLSOuq43DS3H1zVY4HgRRuN0Y8wDrrfH2JjNcjeOLkkYlLUJeDIuGB3yGiHD3oxF2xjUq7Z3hVgIVTFkZZiXUELyh3iBlLgfBH85KG4y7nWHeuIzKOArjGdad8N0fE89R+PVXYXOb0GuB1+MRLovw/gcImnh4EC5HoT9AHIQ//TEzD8bffhF+/AkuRyXOQCXc3WWWSRAHTQ0hGH1fNOi9YVlY7TJTFPybNtK1wtv3mXGA+QBTFtZVxpLw9//23LSJeRHGJIgUlotmzJPy9avw/b3QBiPXRspwfRG+fHR4l/nlF8VVmQ/fJ/pB+PUfDp8gRTi/glMQMSTBeBYQIS4gWWg3ht9vYInwf/+jqBZQvAkJ6YwpKuNReD0r632mPyrniyKVcXuX+fAuk3rh+VHJIjRrg2gsk/LxF6FbCfs1XB6Fl9ogCOMVtBKcGhqFZMU8YuA6EAeW4PRFeRsW/NOToqnM3iTCnIW7WyNHYTkrOhn9oiSEZRRSD8ELp6MyXoAsHA6Gqw3nwJJgJRiQDLu1MU7w1785hsERnNF2GTxUrWG5wLFFMAPEaGqYMwyjw5/OirdMtwaXoWoz1wg5Q9MYVZMJapgqp2xoUtRDnGFKhvMwnpV2k2k2gEC7MapoPD0rY1RWNwmfoV4gZ+FyVOZJCMG42WckCaole3MSpBFWbzNjBG13RrUvcBmd4FeQVMAJ9TpTbWBMyvkMWhu7DwlCxgQISr02drvE9ZgRM3yAqoX1HbRr43otTq4U4jAheaHrjJubjACHV0XEaNeGC4AXzFsBZA+qDZsl60Y7aO+My6RUDdzdwzjBGGFUYVAhV0rVCKuuuE+17CSFBY2lh8pBWxsuGG2T8CkynYUgoGmmdQubLeg3x0ooIDIasDeqO8OFzBQhieKXUT7FCL5ls9lm+rMSR7A241ZK1UGajRWZ/RYeHx0m0FZGAqZBuF4V9cLpVWi7zDoAY1lnm06wZLiYePOuAoPXh4RlpdkZ1dpYrkK0ArhNlZkWUAck0DiAMxgvggPubnJB/gWaOuEx7veJ+7vM11+F10cwLXuIxBLo81h25yAwngTJ4KpC5V4M54wlOfCOlxclxnJqXW3ESeiHEjVpLGPUVyXcbQBfq31YZiFU8PpRGAbofKZRGEfl4VlYbZX1rVFv4N4lQiXMCOdPQrUzVltjOpc9RjO8HJTtm8zqBuqrcrlCe1NaC60U78qs//qi5AihAXGC10LrXiHPRlMZXsXOZkKObJ7ORbB/+kPEBUF6WK/h9aQMMfPu3rj7YLwc+DZXhVMPoSr5SWVs1pnnJ0c6KT+8i0y+mGyZIDSKtEqcC4qRwbtiKl8b81RKA18Vh8cFPFpm3xSNzU2hiMdnTwjGMhrrdSY0meOr49NflK+tcbs34hFCyGwX4fAg7FZGrcLSK+u64NVnc+xvM66BlAoRWTQMUClNxJQcy2RsG6hbmAe4nIV2bZgZWjnBKdQBtnUJ1utFOT0Ly6KsKlg3IMm43yX2TWZ8MdZV0Y9T2O8yk4G2RlMLQYQ4wjAo51dliUJ0xQh1kxE1RlNWd7DdJ6azMFyEWoxVYziMuReqoPhxFtYbI87CNIHLxqo1zMCy8fCqfPgx8+c/R+JoTJNwyMo8KJt9ZpyVTQfTQwHf5jbTrmH41i5kUcYMOUG9S8RFaSqhqzKWwL4ZKoRMtykn6wTmJCyL4MMaVju4HAzVb+MKY0xK5SEu8OWrY7eDNexus2YJ2QKyk3kIzNvYEXLq+lVKrboqt5hmkp4LpaZS4XYemF1TpjEV6/KssgbLaJ794mVIV5FFSAuYCHDwLjBepghccqY+xhVWeGKyyDMmbh9UmpfLlmskLOkoWph2tv7N9kYgQQ2hquUki5bTPiYFmElAtixQUuB2XTGfU6YQLpIiwCKRveQVNBSOB1gMUVCq4od12JsIzGcnXMMzhvVA6IUkoj4PQCb+4yv/mtcXkUznPJNecNRFm1xusjbFshm3A5UW7QyuubOyN4Y7/PnB5Ldg5R2O+N2kE0SrtWecMSJAQfIA1Cmks/U2am0QloKm3oMhuVlvRPA+j8rc2KEE1ZMtR15u2bTOsylwPoCH6CKhrOjFUj6AzjkfJIA7z/IfPmzjgclVAbbSOEkNHTWVhGeDoqHw+O61ROqa5AMMQXRssLdMFIPfjFaMSYr8JwLmvrsAj9IAyL4kKmXWW+/z5TVYn+YqQFwGgctM4YRzCB/uTwjXJzD9mEblNMtuTSRGjYgG4hGRxfADU260TwBiacz0KcjDYYZFh1IFJWzSYY81i4zwVBFsiT8o9fPP/x7x7thO9+hO09hHW5pluXL759C20jPD6UwN7v4DqBq4XkhKcX5doLWmmmcca6NW52kJNwnJXDpFxnwdVQVi9woWg0JcEDt/vM/VsjYOQrHJ+FeSxkM07Cy3MpgK6z0d0YPhhLMu5/MNZbY56N5EuI/+XflFphODmeHpW3d0ZbGb5yguvKwvT4qFxPQrMS0gLzLGwqo90XZ1sSvEKoMyHANIFKWZJkMW5uhJSNIMZPP0F/zpzPgkTDItzs4Xwp7xEVTGC3p8hkUXIF261ReQMxqlbwm1tjMqEfC0JZLcxzaZeeH0oL4IIQQqHlEIwowuZd5vjkeH6FXZPZ1LBILsVSLuXP5jfGNBvXJ8fXL8L5UIDgeDDit2Y3zgLA+n35R+F4MHBFRusb4/8HAEzNE3euqMcqAAAAAElFTkSuQmCC";
        public string LogoTexture = "";
        public string BGTexture = "";
        public void FillGradientBeam(Graphics g, Color Col1, Color Col2, Rectangle rect, GradientAlignment align)
        {
            SmoothingMode stored = g.SmoothingMode;
            ColorBlend Blend = new ColorBlend();
            g.SmoothingMode = SmoothingMode.HighQuality;
            switch (align)
            {
                case GradientAlignment.Vertical:
                    {
                        LinearGradientBrush PathGradient = new LinearGradientBrush(new Point(rect.X, rect.Y), new Point(rect.X + rect.Width - 1, rect.Y), Color.Black, Color.Black);
                        Blend.Positions = new[] { 0, 1 / 2.0f, 1 };
                        Blend.Colors = new[] { Col1, Col2, Col1 };
                        PathGradient.InterpolationColors = Blend;
                        g.FillRectangle(PathGradient, rect);
                        break;
                    }
                case GradientAlignment.Horizontal:
                    {
                        LinearGradientBrush PathGradient = new LinearGradientBrush(new Point(rect.X, rect.Y), new Point(rect.X, rect.Y + rect.Height), Color.Black, Color.Black);
                        Blend.Positions = new[] { 0, 1 / 2.0f, 1 };
                        Blend.Colors = new[] { Col1, Col2, Col1 };
                        PathGradient.InterpolationColors = Blend;
                        PathGradient.RotateTransform(0F);
                        g.FillRectangle(PathGradient, rect);
                        break;
                    }
            }
            g.SmoothingMode = stored;
        }
        public void DrawTextWithShadow(Graphics G, Rectangle ContRect, string Text, Font TFont, HorizontalAlignment TAlign, Color TColor, Color BColor)
        {
            DrawText(G, new Rectangle(ContRect.X + 1, ContRect.Y + 1, ContRect.Width, ContRect.Height), Text, TFont, TAlign, BColor);
            DrawText(G, ContRect, Text, TFont, TAlign, TColor);
        }
        public void FillDualGradPath(Graphics g, Color Col1, Color Col2, Rectangle rect, GraphicsPath gp, GradientAlignment align)
        {
            SmoothingMode stored = g.SmoothingMode;
            ColorBlend Blend = new ColorBlend();
            g.SmoothingMode = SmoothingMode.HighQuality;
            switch (align)
            {
                case GradientAlignment.Vertical:
                    {
                        LinearGradientBrush PathGradient = new LinearGradientBrush(new Point(rect.X, rect.Y), new Point(rect.X + rect.Width - 1, rect.Y), Color.Black, Color.Black);
                        Blend.Positions = new[] { 0, 1 / 2.0f, 1 };
                        Blend.Colors = new[] { Col1, Col2, Col1 };
                        PathGradient.InterpolationColors = Blend;
                        g.FillPath(PathGradient, gp);
                        break;
                    }
                case GradientAlignment.Horizontal:
                    {
                        LinearGradientBrush PathGradient = new LinearGradientBrush(new Point(rect.X, rect.Y), new Point(rect.X, rect.Y + rect.Height), Color.Black, Color.Black);
                        Blend.Positions = new[] { 0, 1 / 2.0f, 1 };
                        Blend.Colors = new[] { Col1, Col2, Col1 };
                        PathGradient.InterpolationColors = Blend;
                        PathGradient.RotateTransform(0F);
                        g.FillPath(PathGradient, gp);
                        break;
                    }
            }
            g.SmoothingMode = stored;
        }
        public void DrawText(Graphics G, Rectangle ContRect, string Text, Font TFont, HorizontalAlignment TAlign, Color TColor)
        {
            if (string.IsNullOrEmpty(Text))
            {
                return;
            }
            Size TextSize = G.MeasureString(Text, TFont).ToSize();
            int CenteredY = ContRect.Height / 2 - TextSize.Height / 2;
            switch (TAlign)
            {
                case HorizontalAlignment.Left:
                    {
                        StringFormat sf = new StringFormat();
                        sf.LineAlignment = StringAlignment.Near;
                        sf.Alignment = StringAlignment.Near;
                        G.DrawString(Text, TFont, new SolidBrush(TColor), new Rectangle(ContRect.X, Convert.ToInt32(ContRect.Y + ContRect.Height / 2.0 - TextSize.Height / 2.0), ContRect.Width, ContRect.Height), sf);
                        break;
                    }
                case HorizontalAlignment.Right:
                    {
                        StringFormat sf = new StringFormat();
                        sf.LineAlignment = StringAlignment.Far;
                        sf.Alignment = StringAlignment.Far;
                        G.DrawString(Text, TFont, new SolidBrush(TColor), new Rectangle(ContRect.X, ContRect.Y, ContRect.Width, Convert.ToInt32(ContRect.Height / 2.0 + TextSize.Height / 2.0)), sf);
                        break;
                    }
                case HorizontalAlignment.Center:
                    {
                        StringFormat sf = new StringFormat();
                        sf.LineAlignment = StringAlignment.Center;
                        sf.Alignment = StringAlignment.Center;
                        G.DrawString(Text, TFont, new SolidBrush(TColor), ContRect, sf);
                        break;
                    }
            }
        }
        public GraphicsPath RoundRect(Rectangle Rectangle, int Curve)
        {
            GraphicsPath Path = new GraphicsPath();
            int ArcRectangleWidth = Curve * 2;
            Path.AddArc(new Rectangle(Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -180F, 90F);
            Path.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -90F, 90F);
            Path.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 0F, 90F);
            Path.AddArc(new Rectangle(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 90F, 90F);
            Path.AddLine(new Point(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y), new Point(Rectangle.X, Curve + Rectangle.Y));
            return Path;
        }
        public GraphicsPath RoundedTopRect(Rectangle Rectangle, int Curve)
        {
            GraphicsPath Path = new GraphicsPath();
            int ArcRectangleWidth = Curve * 2;
            Path.AddArc(new Rectangle(Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -180F, 90F);
            Path.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -90F, 90F);
            Path.AddLine(new Point(Rectangle.X + Rectangle.Width, Rectangle.Y + ArcRectangleWidth), new Point(Rectangle.X + Rectangle.Width, Rectangle.Y + Rectangle.Height));
            Path.AddLine(new Point(Rectangle.X, Rectangle.Height + Rectangle.Y), new Point(Rectangle.X, Rectangle.Y + Curve));
            return Path;
        }
        public Image CodeToImage(string Code)
        {
            return Image.FromStream(new System.IO.MemoryStream(Convert.FromBase64String(Code)));
        }
    }

    #endregion

    #region Base Classes
    public class ThemedControl : Control
    {
        public DrawUtils D = new DrawUtils();
        public MouseState State = MouseState.None;
        public Palette Pal;
        protected override void OnPaintBackground(System.Windows.Forms.PaintEventArgs e)
        {
        }
        protected override void OnMouseEnter(EventArgs e)
        {
            base.OnMouseEnter(e);
            State = MouseState.Over;
            Invalidate();
        }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseDown(e);
            State = MouseState.Down;
            Invalidate();
        }
        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);
            State = MouseState.None;
            Invalidate();
        }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseUp(e);
            State = MouseState.Over;
            Invalidate();
        }
        protected override void OnTextChanged(System.EventArgs e)
        {
            base.OnTextChanged(e);
            Invalidate();
        }
        public ThemedControl() : base()
        {
            MinimumSize = new Size(20, 20);
            ForeColor = Color.FromArgb(146, 149, 152);
            Font = new Font("Segoe UI", 10.0F);
            DoubleBuffered = true;
            Pal = new Palette();
            Pal.ColHighest = Color.FromArgb(100, 110, 120);
            Pal.ColHigh = Color.FromArgb(65, 70, 75);
            Pal.ColMed = Color.FromArgb(40, 42, 45);
            Pal.ColDim = Color.FromArgb(30, 32, 35);
            Pal.ColDark = Color.FromArgb(15, 17, 19);
            BackColor = Pal.ColDim;
        }
    }
    public class ThemedTextbox : TextBox
    {
        public DrawUtils D = new DrawUtils();
        public MouseState State = MouseState.None;
        public Palette Pal;
        protected override void OnPaintBackground(System.Windows.Forms.PaintEventArgs e)
        {
        }
        protected override void OnMouseEnter(EventArgs e)
        {
            base.OnMouseEnter(e);
            State = MouseState.Over;
            Invalidate();
        }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseDown(e);
            State = MouseState.Down;
            Invalidate();
        }
        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);
            State = MouseState.None;
            Invalidate();
        }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseUp(e);
            State = MouseState.Over;
            Invalidate();
        }
        protected override void OnTextChanged(System.EventArgs e)
        {
            base.OnTextChanged(e);
            Invalidate();
        }
        public ThemedTextbox() : base()
        {
            MinimumSize = new Size(20, 20);
            ForeColor = Color.FromArgb(146, 149, 152);
            Font = new Font("Segoe UI", 10.0F);
            DoubleBuffered = true;
            Pal = new Palette();
            Pal.ColHighest = Color.FromArgb(100, 110, 120);
            Pal.ColHigh = Color.FromArgb(65, 70, 75);
            Pal.ColMed = Color.FromArgb(40, 42, 45);
            Pal.ColDim = Color.FromArgb(30, 32, 35);
            Pal.ColDark = Color.FromArgb(15, 17, 19);
            BackColor = Pal.ColDim;
        }
    }
    public class ThemedContainer : ContainerControl
    {
        public DrawUtils D = new DrawUtils();
        private bool _Sizable = true;
        public bool Sizable
        {
            get
            {
                return _Sizable;
            }
            set
            {
                _Sizable = value;
            }
        }
        protected bool Drag = true;
        public MouseState State = MouseState.None;
        protected bool TopCap = false;
        protected bool SizeCap = false;
        public Palette Pal;
        protected Point MouseP = new Point(0, 0);
        protected int TopGrip;
        protected override void OnPaintBackground(System.Windows.Forms.PaintEventArgs e)
        {
        }
        protected override void OnMouseEnter(EventArgs e)
        {
            base.OnMouseEnter(e);
            State = MouseState.Over;
            Invalidate();
        }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseDown(e);
            State = MouseState.Down;
            if (e.Button == MouseButtons.Left)
            {
                if ((new Rectangle(0, 0, Width, TopGrip)).Contains(e.Location))
                {
                    TopCap = true;
                    MouseP = e.Location;
                }
                else if (Drag && (new Rectangle(Width - 15, Height - 15, 15, 15)).Contains(e.Location))
                {
                    SizeCap = true;
                    MouseP = e.Location;
                }
            }
        }
        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);
            State = MouseState.None;
            Invalidate();
        }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseUp(e);
            State = MouseState.Over;
            TopCap = false;
            if (Drag)
            {
                SizeCap = false;
            }

        }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseMove(e);

            if (TopCap)
            {
                Parent.Location = new Point(MousePosition.X - MouseP.X, MousePosition.Y - MouseP.Y);
            }
            if (Sizable && Drag && SizeCap)
            {
                MouseP = e.Location;
                Parent.Size = new Size(MouseP);
                Invalidate();
            }

        }
        protected override void OnTextChanged(System.EventArgs e)
        {
            base.OnTextChanged(e);
            Invalidate();
        }
        public ThemedContainer() : base()
        {
            MinimumSize = new Size(20, 20);
            ForeColor = Color.FromArgb(146, 149, 152);
            Font = new Font("Trebuchet MS", 10.0F);
            DoubleBuffered = true;
            Pal = new Palette();
            Pal.ColHighest = Color.FromArgb(100, 110, 120);
            Pal.ColHigh = Color.FromArgb(65, 70, 75);
            Pal.ColMed = Color.FromArgb(40, 42, 45);
            Pal.ColDim = Color.FromArgb(30, 32, 35);
            Pal.ColDark = Color.FromArgb(5, 8, 10);
            BackColor = Pal.ColDim;
        }
    }
    public class ThemedTabControl : TabControl
    {
        public DrawUtils D = new DrawUtils();
        public MouseState State = MouseState.None;
        public Palette Pal;
        protected override void OnPaintBackground(System.Windows.Forms.PaintEventArgs e)
        {
        }
        protected override void OnMouseEnter(EventArgs e)
        {
            base.OnMouseEnter(e);
            State = MouseState.Over;
            Invalidate();
        }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseDown(e);
            State = MouseState.Down;
            Invalidate();
        }
        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);
            State = MouseState.None;
            Invalidate();
        }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseUp(e);
            State = MouseState.Over;
            Invalidate();
        }
        protected override void OnTextChanged(System.EventArgs e)
        {
            base.OnTextChanged(e);
            Invalidate();
        }
        public ThemedTabControl() : base()
        {
            MinimumSize = new Size(20, 20);
            ForeColor = Color.FromArgb(146, 149, 152);
            Font = new Font("Segoe UI", 10.0F);
            DoubleBuffered = true;
            Pal = new Palette();
            Pal.ColHighest = Color.FromArgb(100, 110, 120);
            Pal.ColHigh = Color.FromArgb(65, 70, 75);
            Pal.ColMed = Color.FromArgb(40, 42, 45);
            Pal.ColDim = Color.FromArgb(30, 32, 35);
            Pal.ColDark = Color.FromArgb(15, 17, 19);
            BackColor = Pal.ColDim;
            Alignment = TabAlignment.Top;
            SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.ResizeRedraw | ControlStyles.UserPaint | ControlStyles.DoubleBuffer, true);
        }
    }
    public class ThemedListControl : ListBox
    {
        public DrawUtils D = new DrawUtils();
        public MouseState State = MouseState.None;
        public Palette Pal;
        protected override void OnPaintBackground(System.Windows.Forms.PaintEventArgs e)
        {
        }
        protected override void OnMouseEnter(EventArgs e)
        {
            base.OnMouseEnter(e);
            State = MouseState.Over;
            Invalidate();
        }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseDown(e);
            State = MouseState.Down;
            Invalidate();
        }
        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);
            State = MouseState.None;
            Invalidate();
        }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
        {
            base.OnMouseUp(e);
            State = MouseState.Over;
            Invalidate();
        }
        protected override void OnTextChanged(System.EventArgs e)
        {
            base.OnTextChanged(e);
            Invalidate();
        }
        public ThemedListControl() : base()
        {
            MinimumSize = new Size(20, 20);
            ForeColor = Color.FromArgb(146, 149, 152);
            Font = new Font("Segoe UI", 10.0F);
            DoubleBuffered = true;
            Pal = new Palette();
            Pal.ColHighest = Color.FromArgb(100, 110, 120);
            Pal.ColHigh = Color.FromArgb(65, 70, 75);
            Pal.ColMed = Color.FromArgb(40, 42, 45);
            Pal.ColDim = Color.FromArgb(30, 32, 35);
            Pal.ColDark = Color.FromArgb(15, 17, 19);
            BackColor = Pal.ColDim;
        }
    }
    #endregion
    
    public class NexusForm : ThemedContainer
    {
        private HorizontalAlignment _TextAlignment = HorizontalAlignment.Center;
        public HorizontalAlignment TextAlignment
        {
            get
            {
                return _TextAlignment;
            }
            set
            {
                _TextAlignment = value;
            }
        }
        private int _TopSize = 57;
        public int TopSize
        {
            get
            {
                return _TopSize;
            }
            set
            {
                _TopSize = value;
            }
        }
        public int TextYOffset { get; set; }
        public NexusForm() : base()
        {
            MinimumSize = new Size(305, 150);
            Dock = DockStyle.Fill;
            TopGrip = 57;
            TopSize = TopGrip;
            Font = new Font("Segoe UI", 10.0F);
            BackColor = Color.FromArgb(21, 23, 25);
            ForeColor = Color.FromArgb(160, Color.White);
        }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
        {
            Graphics G = e.Graphics;
            base.OnPaint(e);
            try
            {
                this.ParentForm.TransparencyKey = Color.Fuchsia;
                this.ParentForm.MinimumSize = MinimumSize;
                if (!(this.ParentForm.FormBorderStyle == FormBorderStyle.None))
                {
                    this.ParentForm.FormBorderStyle = FormBorderStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            G.Clear(this.ParentForm.TransparencyKey);

            //| Drawing the main rectangle base.
            Rectangle MainRect = new Rectangle(0, 0, Width - 1, Height - 1);
            Rectangle MainHighlightRect = new Rectangle(1, 1, Width - 3, Height - 3);
            TextureBrush BGTextureBrush = new TextureBrush(D.CodeToImage(D.BGTexture), WrapMode.TileFlipXY);
            G.FillRectangle(BGTextureBrush, MainRect);
            G.DrawRectangle(new Pen(Color.FromArgb(40, Pal.ColHighest)), MainHighlightRect);
            G.DrawRectangle(Pens.Black, MainRect);

            //| Detail to the main rect's top grip
            Rectangle ShineRect = new Rectangle(0, 0, Width, TopSize / 2);
            G.FillRectangle(new SolidBrush(Color.FromArgb(40, Pal.ColMed)), ShineRect);
            LinearGradientBrush SubShineLGB1 = new LinearGradientBrush(ShineRect, Color.Black, Color.Black, 0F, false);
            LinearGradientBrush SubShineLGB2 = new LinearGradientBrush(ShineRect, Color.Black, Color.Black, 0F, false);
            ColorBlend Blend = new ColorBlend();
            Blend.Positions = new float[] { 0, 1f / 3.0f, 2f / 3.0f, 1 };
            Blend.Colors = new[] { Color.FromArgb(50, Color.Black), Color.FromArgb(150, Color.Black), Color.FromArgb(50, Color.Black), Color.Transparent };
            SubShineLGB1.InterpolationColors = Blend;
            SubShineLGB1.RotateTransform(45F);
            Blend.Colors = new[] { Color.FromArgb(50, Pal.ColHighest), Color.FromArgb(150, Pal.ColHighest), Color.FromArgb(50, Pal.ColHighest), Color.Transparent };
            SubShineLGB2.InterpolationColors = Blend;
            SubShineLGB2.RotateTransform(45F);
            //|
            D.FillGradientBeam(G, Color.Transparent, Color.FromArgb(80, Pal.ColHighest), ShineRect, GradientAlignment.Vertical);
            G.DrawLine(new Pen(SubShineLGB1), new Point(1, ShineRect.Height), new Point(Width - 2, ShineRect.Height));
            G.DrawLine(new Pen(SubShineLGB2), new Point(1, ShineRect.Height + 1), new Point(Width - 2, ShineRect.Height + 1));

            //| Goind back through and making the rect below the detail darker
            Rectangle DarkRect = new Rectangle(0, ShineRect.Height, Width - 1, Height - 1 - ShineRect.Height);
            LinearGradientBrush DarkLGB = new LinearGradientBrush(DarkRect, Color.FromArgb(20, Color.Black), Color.FromArgb(100, Color.Black), 90);
            G.FillRectangle(DarkLGB, DarkRect);

            //| The title text / logo. Uncomment whichever you like. In order to change the logo, change the Base64 string down in Drawing utils.
            //Dim Logo As Bitmap = D.CodeToImage(D.LogoTexture)
            //G.DrawImage(Logo, New Point((Width / 2) - (Logo.Width / 1.52), 0))
            D.DrawTextWithShadow(G, new Rectangle(0, 0, Width, TopSize + TextYOffset), Text, Font, TextAlignment, ForeColor, Color.Black);

            //| The inner and slightly brigher rectangle of the form
            Rectangle InnerRect = new Rectangle(5, TopSize, Width - 11, Height - 6 - TopSize);
            Rectangle InnerHighlightRect = new Rectangle(6, TopSize + 1, Width - 13, Height - 8 - TopSize);
            G.FillRectangle(BGTextureBrush, InnerRect);
            G.FillRectangle(new SolidBrush(Color.FromArgb(45, Pal.ColHigh)), InnerRect);
            G.DrawRectangle(new Pen(Color.FromArgb(40, Pal.ColHighest)), InnerHighlightRect);
            G.DrawRectangle(Pens.Black, InnerRect);
        }
    }


}
